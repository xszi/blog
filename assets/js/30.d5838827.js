(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{386:function(_,e,t){"use strict";t.r(e);var v=t(42),o=Object(v.a)({},(function(){var _=this,e=_.$createElement,t=_._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"可视化的javascript-五-原型继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可视化的javascript-五-原型继承"}},[_._v("#")]),_._v(" 可视化的JavaScript —— （五）原型继承")]),_._v(" "),t("p",[_._v("【五】"),t("a",{attrs:{href:"https://dev.to/lydiahallie/javascript-visualized-prototypal-inheritance-47co",target:"_blank",rel:"noopener noreferrer"}},[_._v("JavaScript Visualized: Prototypal Inheritance"),t("OutboundLink")],1)]),_._v(" "),t("p",[_._v("有没有想过，为什么我们的字符串，数组或对象可以使用JavaScript内置的方法，例如"),t("code",[_._v(".length")]),_._v("，"),t("code",[_._v(".split()")]),_._v("，"),t("code",[_._v(".join()")]),_._v("？我们从未明确指定它们，它们来自哪里？现在不要说“这是 "),t("strong",[_._v("JavaScript")]),_._v("固有机制，没人知道，它很神奇🧚🏻‍♂️”，实际上是因为一种叫做原型继承的东西。它非常棒，而且你使用它的频率比你意识到的要多！")]),_._v(" "),t("p",[_._v("我们经常需要创建许多相同类型的对象。假设我们有一个网站，人们可以在其中浏览狗狗！")]),_._v(" "),t("p",[_._v("对于每只狗狗，我们都需要获取代表那只狗狗的对象！🐕 不是每次都写一个新对象，我将使用一个构造函数（我知道你在想什么，我稍后会介绍 ES6 类！）从中我们可以使用关键字"),t("code",[_._v("new")]),_._v("创建 "),t("code",[_._v("Dog")]),_._v("实例（这篇文章不是真的要解释构造函数，所以我不会谈论太多）。")]),_._v(" "),t("p",[_._v("每只狗狗都有名字、品种、颜色和吠叫的功能！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120296586-dbca1a80-c2fa-11eb-9647-aa8fc0cbd29e.png",alt:"image"}})]),_._v(" "),t("p",[_._v("当我们创建"),t("code",[_._v("Dog")]),_._v("构造函数时，它并不是我们创建的唯一对象。我们还自动创建了另一个对象，即原型对象！默认情况下，此对象包含一个构造函数属性，"),t("code",[_._v("Dog")]),_._v("在这种情况下，它只是对原始构造函数的引用。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120297073-52671800-c2fb-11eb-8e73-cca62e4af6a5.gif",alt:"9howj4i3zvlgun3svppp"}})]),_._v(" "),t("p",[t("code",[_._v("Dog")]),_._v("的构造函数属性"),t("code",[_._v("prototype")]),_._v("是不可枚举的，这意味着它不会显示出来，当我们试图访问该对象的属性。但它是存在的！")]),_._v(" "),t("p",[_._v("好的.. 为什么我们会有这个属性对象？首先，让我们创建一些我们想要展示的"),t("code",[_._v("Dog")]),_._v("。为简单起见，我将它们称为"),t("code",[_._v("dog1")]),_._v("和"),t("code",[_._v("dog2")]),_._v("。"),t("code",[_._v("dog1")]),_._v("是黛西，一只可爱的黑色拉布拉多！"),t("code",[_._v("dog2")]),_._v("是杰克，无所畏惧的白人杰克罗素😎")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120297930-2c8e4300-c2fc-11eb-920c-ede79453afad.png",alt:"image"}})]),_._v(" "),t("p",[_._v("让我们输出"),t("code",[_._v("dog1")]),_._v("到控制台，并展开查看它的属性！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120298315-8f7fda00-c2fc-11eb-95ff-3e4627875c62.gif",alt:"tt4yfoz8ckmxfofv3f9v"}})]),_._v(" "),t("p",[_._v("我们看到了我们添加的属性，比如"),t("code",[_._v("name")]),_._v(", "),t("code",[_._v("breed")]),_._v(", "),t("code",[_._v("color")]),_._v(", 和"),t("code",[_._v("bark")]),_._v(".. 但是哇，那个"),t("code",[_._v("__proto__")]),_._v("属性是什么！它是不可枚举的，这意味着当我们尝试获取对象的属性时，它通常不会出现。让我们展开它！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120298328-93136100-c2fc-11eb-817e-3d67c8984680.gif",alt:"dye57pcku5cfaz0er60c"}})]),_._v(" "),t("p",[_._v("哇！它看起来和"),t("code",[_._v("Dog.prototype")]),_._v("一模一样。"),t("code",[_._v("__proto__")]),_._v("是对"),t("code",[_._v("Dog.prototype")]),_._v("对象的引用。这就是原型继承的全部内容：构造函数的每个实例都可以访问构造函数的原型！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120299540-ab37b000-c2fd-11eb-8ee1-a2b0a6b349b9.gif",alt:"t6kiav029gl2e0hv1xct"}})]),_._v(" "),t("p",[_._v("那为什么这很酷？有时我们拥有所有实例共享的属性。例如本例中的"),t("code",[_._v("bark")]),_._v("函数：每个实例都完全相同，为什么每次创建新"),t("code",[_._v("Dog")]),_._v("时都要创建一个新函数，每次都消耗内存？相反，我们可以将它添加到"),t("code",[_._v("Dog.prototype")]),_._v("对象中！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120300361-6fe9b100-c2fe-11eb-8646-16862057d05d.gif",alt:"59nlnyqioosaowj09xn8"}})]),_._v(" "),t("p",[_._v("每当我们尝试访问实例上的属性时，引擎首先在局部作用域搜索以查看该属性是否在对象本身上定义。然而，如果它找不到我们试图访问的属性，引擎就会通过属性"),t("code",[_._v("__proto__")]),_._v("沿着原型链继续查找！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120300362-6fe9b100-c2fe-11eb-8139-cd6b3c5121bd.gif",alt:"fabyyjot1s78mttyzzk8"}})]),_._v(" "),t("p",[_._v("现在这只是一个步骤，它可以包含多个步骤！如果您持续跟进，您可能已经注意到，当我展开"),t("code",[_._v("__proto__")]),_._v("显示"),t("code",[_._v("Dog.prototype")]),_._v("时. "),t("code",[_._v("Dog.prototype")]),_._v("本身是一个对象，这意味着它实际上是"),t("code",[_._v("Object")]),_._v("构造函数的一个实例！这意味着"),t("code",[_._v("Dog.prototype")]),_._v("它还包含一个"),t("code",[_._v("__proto__")]),_._v("属性，它指向"),t("code",[_._v("Object.prototype")]),_._v("!")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120301841-dc18e480-c2ff-11eb-9bc2-9f4a617f2a23.gif",alt:"8vk5w6loliot818f2lcd"}})]),_._v(" "),t("p",[_._v("最后，我们对所有内置方法的来源有了一个答案：它们在原型链上！")]),_._v(" "),t("p",[_._v("例如"),t("code",[_._v(".toString()")]),_._v("方法:")]),_._v(" "),t("p",[_._v("它是在"),t("code",[_._v("dog1")]),_._v("对象上局部定义的吗？嗯没有...")]),_._v(" "),t("p",[_._v("它是否定义在对象上"),t("code",[_._v("dog1.__proto__")]),_._v("引用的对象上，即"),t("code",[_._v("Dog.prototype")]),_._v("？也没有！")]),_._v(" "),t("p",[_._v("是否定义在"),t("code",[_._v("Dog.prototype.__proto__")]),_._v("引用的对象上，即"),t("code",[_._v("Object.prototype")]),_._v("？是的。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120302329-606b6780-c300-11eb-820f-a6634abe604a.gif",alt:"fpt5nndkbq5kau0nqeqj"}})]),_._v(" "),t("p",[_._v("我们刚刚使用了构造函数 "),t("code",[_._v("( function Dog() { ... })")]),_._v("，它仍然是有效的 JavaScript。然而，ES6 实际上为构造函数和原型引入了一种更简单的语法：类！")]),_._v(" "),t("blockquote",[t("p",[_._v("类只是构造函数的语法糖。一切仍然以同样的方式工作！")])]),_._v(" "),t("p",[_._v("我们用"),t("code",[_._v("class")]),_._v("关键字编写类。一个类有一个"),t("code",[_._v("constructor")]),_._v("函数，基本上就是我们用ES5语法写的构造函数！我们要添加到原型中的属性是在类主体本身上定义的。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120302998-01f2b900-c301-11eb-8167-b6b962dec46e.gif",alt:"qnbqubcipqjl5pb3i8ds"}})]),_._v(" "),t("p",[_._v("类的另一个好处是我们可以轻松扩展其他类。")]),_._v(" "),t("p",[_._v("假设我们要展示几只相同品种的狗狗，即吉娃娃！吉娃娃仍然是一只狗狗。为了让这个例子保持简单，我现在只将"),t("code",[_._v("name")]),_._v("属性传递给 "),t("code",[_._v("Dog")]),_._v(" 类，而不是"),t("code",[_._v("name")]),_._v(","),t("code",[_._v("breed")]),_._v("和"),t("code",[_._v("color")]),_._v("。但是这些吉娃娃也可以做一些特别的事情，它们的吠声很小。除了说"),t("code",[_._v("Woof")]),_._v("!，吉娃娃还可以说"),t("code",[_._v("Small woof")]),_._v("!🐕")]),_._v(" "),t("p",[_._v("在扩展类中，我们可以使用"),t("code",[_._v("super")]),_._v("关键字访问父类的构造函数。父类的构造函数期望传给子类的参数，在这种情况下，我们必须传递给"),t("code",[_._v("super:name")]),_._v("。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120303941-e50ab580-c301-11eb-9594-316317a3b167.png",alt:"image"}})]),_._v(" "),t("p",[t("code",[_._v("myPet")]),_._v("可以访问"),t("code",[_._v("Chihuahua.prototype")]),_._v("和"),t("code",[_._v("Dog.prototype")]),_._v("（并且自动访问"),t("code",[_._v("Object.prototype")]),_._v("，因为"),t("code",[_._v("Dog.prototype")]),_._v("是一个对象）。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120304149-1a170800-c302-11eb-85bc-ccf766ce2eef.gif",alt:"qija16dju8t5j1ksy0ps"}})]),_._v(" "),t("p",[_._v("由于"),t("code",[_._v("Chihuahua.prototype")]),_._v("有"),t("code",[_._v("smallBark")]),_._v("功能，"),t("code",[_._v("Dog.prototype")]),_._v("有"),t("code",[_._v("bark")]),_._v("功能，我们就可以同时访问"),t("code",[_._v("smallBark")]),_._v("和"),t("code",[_._v("bark")]),_._v("上"),t("code",[_._v("myPet")]),_._v("！")]),_._v(" "),t("p",[_._v("现在你可以想象，原型链不会永远持续下去。最终有一个原型等于null的"),t("code",[_._v("Object.prototype")]),_._v("对象：在这种情况下的对象！如果我们尝试访问在局部作用域或原型链上找不到的属性，则会返回undefined。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/xszi/frontend-translation-stat/blob/main/proto.gif",alt:"image"}})]),_._v(" "),t("p",[_._v("虽然我在这里用构造函数和类解释了一切，但另一种向对象添加原型的方法是"),t("code",[_._v("Object.create")]),_._v("方法。使用此方法，我们创建了一个新对象，并且可以准确指定该对象的原型应该是什么！💪🏼")]),_._v(" "),t("p",[_._v("我们通过将现有对象作为参数传递给"),t("code",[_._v("Object.create")]),_._v("方法来做到这一点。传入对象就是我们创建的对象的原型！")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120305012-dffa3600-c302-11eb-804c-8e28a87f58f7.png",alt:"image"}})]),_._v(" "),t("p",[_._v("让我们输出刚刚创建的对象"),t("code",[_._v("me")]),_._v("。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/120305334-35364780-c303-11eb-9811-7ba72cb73706.gif",alt:"6zzt8zpy85gtitxmpwi9"}})]),_._v(" "),t("p",[_._v("我们没有向"),t("code",[_._v("me")]),_._v("对象添加任何属性，它只包含不可枚举的"),t("code",[_._v("__proto__")]),_._v("属性！"),t("code",[_._v("__proto_")]),_._v("_属性保存我们定义为原型对象的引用："),t("code",[_._v("person")]),_._v("对象，它具有一个name和一个age属性。由于"),t("code",[_._v("person")]),_._v("也是一个对象，"),t("code",[_._v("person")]),_._v("对象上的__proto__属性值是"),t("code",[_._v("Object.prototype")]),_._v("（但为了更容易阅读，我没有在 gif 中展开该属性！）")]),_._v(" "),t("p",[_._v("【完】")])])}),[],!1,null,null,null);e.default=o.exports}}]);