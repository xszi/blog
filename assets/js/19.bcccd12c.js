(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{375:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"通过两个示例来解释递归和和调用堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过两个示例来解释递归和和调用堆栈"}},[t._v("#")]),t._v(" 通过两个示例来解释递归和和调用堆栈")]),t._v(" "),a("p",[a("strong",[t._v("文章出处")]),t._v("："),a("a",{attrs:{href:"https://blog.codeanalogies.com/2020/01/14/recursion-and-the-call-stack-explained-by-reading-a-book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Recursion and the Call Stack Explained By Reading A Book"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[a("strong",[t._v("递归")]),t._v("是所有编程语言中最令人兴奋的原则之一。")]),t._v(" "),a("p",[t._v("非递归函数（换句话说，您过去使用过的函数）将在每次调用时运行一次，并通过return语句输出。")]),t._v(" "),a("p",[t._v("但是，递归函数可以被调用一次然后自身调用不确定次数，最后将所有函数调用的输出合并到一个return语句。")]),t._v(" "),a("p",[t._v("下面是两种函数版本：")]),t._v(" "),a("ul",[a("li",[t._v("非递归\n"),a("img",{attrs:{width:"522",alt:"aa",src:"https://user-images.githubusercontent.com/23453305/113369804-c9803e80-9394-11eb-92a3-0874f20c6c6d.png"}})]),t._v(" "),a("li",[t._v("递归\n"),a("img",{attrs:{width:"523",alt:"bb",src:"https://user-images.githubusercontent.com/23453305/113368994-c08e6d80-9392-11eb-9548-4894c5625373.png"}})])]),t._v(" "),a("p",[t._v("通过单个语句可以将一个函数调用无穷次，Exciting！")]),t._v(" "),a("p",[t._v("同时，从现实世界寻找这种情况的比喻是困难的。而且一旦讨论到调用栈，就更难了，我们将在后面讨论。")]),t._v(" "),a("p",[t._v("有人提出了“无限盒子”：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/113369197-45798700-9393-11eb-8fde-2ec813426f4b.png",alt:"image"}})]),t._v(" "),a("p",[t._v("还有“俄罗斯套娃”\n"),a("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/113369341-b9b42a80-9393-11eb-8391-8bd796fc4096.png",alt:"image"}})]),t._v(" "),a("p",[t._v("但是，以上示例对于理解调用堆栈没什么帮助。")]),t._v(" "),a("p",[t._v("所以，本文我们将展示两个流行的递归示例，并构建一种直观的语言来理解函数和调用堆栈，理解如何连续调用多个函数。")]),t._v(" "),a("p",[t._v("在继续本文之前，您应该对"),a("code",[t._v("JavaScript")]),t._v("中的函数有了深入的了解。"),a("a",{attrs:{href:"https://blog.codeanalogies.com/2019/04/14/javascripts-arrow-functions-explained-by-going-down-a-slide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript’s Arrow Functions Explained By Going Down A Slide"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"示例1-阶乘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例1-阶乘"}},[t._v("#")]),t._v(" 示例1-阶乘")]),t._v(" "),a("p",[a("strong",[t._v("阶乘")]),t._v("是最流行的递归示例。")]),t._v(" "),a("p",[t._v("您可能熟悉代数的阶乘。")]),t._v(" "),a("p",[t._v("它们表示为：3！")]),t._v(" "),a("p",[t._v("该符号的计算结果为3 * 2 * 1或6。")]),t._v(" "),a("p",[t._v("我们可以将其表示为“ for”循环，在该循环外更新变量：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" factorial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("factorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("我们再使用递归代替。可以使用递归和一个函数进行"),a("code",[t._v("n-1")]),t._v("个调用，而不是使用循环来更新循环外的变量，其中"),a("code",[t._v("n")]),t._v("是我们要查找的阶乘。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getFactorial")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFactorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFactorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 24")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("哇！这完成了与上面的代码块相同的操作。")]),t._v(" "),a("p",[t._v("但是，如果看一下第5行，您会发现"),a("code",[t._v("return")]),t._v("语句包含对函数本身的引用。")]),t._v(" "),a("p",[t._v("那么……该函数何时准确返回最终值？我们如何将函数的4个调用链接在一起以返回"),a("strong",[t._v("24")]),t._v("？")]),t._v(" "),a("p",[t._v("这是调用堆栈有用的地方，它会确定这些函数调用返回的顺序。")]),t._v(" "),a("p",[t._v("但是，现在我们一次堆叠了两个概念：递归和调用栈，太多了！")]),t._v(" "),a("p",[t._v("为了可视化调用堆栈，我们考虑从左到右构建一个堆栈。每次添加一个块时，都会将其添加到堆栈的左侧，并将其他块推到右侧。")]),t._v(" "),a("p",[t._v("因此，当我们执行此递归函数时，我们将生成如下所示的堆栈：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/113370768-4c09fd80-9397-11eb-8fa9-cb1723fab09c.gif",alt:"recursionGIFsNum1"}})]),t._v(" "),a("p",[t._v("上面的GIF会在屏幕底部生成调用堆栈。最后剩下"),a("strong",[t._v("1 * 2 * 3 * 4")]),t._v("，结果为24。")]),t._v(" "),a("p",[t._v("调用堆栈由4个函数调用组成，并且直到函数返回1才运行。这是因为前三个调用中的每个都包含对堆栈中下一个调用的引用！")]),t._v(" "),a("p",[t._v("当num = 4时，该函数返回4 * getFactorial（3）。在我们知道getFactorial（3）的值之前，它实际上无法返回值。这就是为什么我们需要一个调用堆栈！")]),t._v(" "),a("p",[t._v("因此，递归允许连续调用一个函数无限次，并且它更新了调用堆栈，该堆栈在最终调用运行后返回一个值。")]),t._v(" "),a("p",[t._v("调用堆栈从左到右更新，然后您可以按解决顺序读取所有调用。最先计算的是最近入栈，第一个入栈则最后计算。")]),t._v(" "),a("p",[t._v("上面的GIF不能很好地显示每个调用之间的这种关系。因此，这是一个更新的版本，显示了如何通过return语句连接所有调用：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/113371279-8b851980-9398-11eb-91df-1a3c68e978a0.gif",alt:"recursionGIFsfactorialnum2"}})]),t._v(" "),a("h3",{attrs:{id:"示例2-分割字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例2-分割字符串"}},[t._v("#")]),t._v(" 示例2-分割字符串")]),t._v(" "),a("p",[t._v("在上面的示例中，我们使用了一个数学示例，该数学示例类似于代数的问题。")]),t._v(" "),a("p",[t._v("这行得通，但是还有许多递归示例，它们超出了数学范围。这个示例中，我们将展示如何使用递归来操作字符串。")]),t._v(" "),a("p",[t._v("这是挑战：反转字符串。")]),t._v(" "),a("p",[t._v("换句话说，以相反的顺序返回带有输入字符串字母的字符串。")]),t._v(" "),a("p",[t._v("您也可以使用“ for”循环执行此操作，但是在此示例中，我们将使用递归。")]),t._v(" "),a("p",[t._v("让我们考虑一下如何反转字符串“ cat”。")]),t._v(" "),a("p",[t._v("每次运行函数调用时，我们都需要隔离字符串的第一个或最后一个字母，然后从字符串中切出一个字母。当我们再次运行该函数时，我们应该再次获取第一个或最后一个字母。")]),t._v(" "),a("p",[t._v("最后，调用堆栈将使我们能够以正确的顺序返回字母。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" testStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("revStr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("revStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("revStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'tac'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/113371574-46adb280-9399-11eb-866e-a105c51ef6a8.gif",alt:"recursionex2v1"}})]),t._v(" "),a("p",[t._v("同样，尽管上面的GIF看起来很容易，但是如果我们想真正理解这些函数调用，就需要更深入地研究最终的return语句。")]),t._v(" "),a("p",[t._v("与上面的示例相比，此示例还有一个重要的区别 —— "),a("strong",[t._v("我们在执行字符串连接而不是乘法")]),t._v("。")]),t._v(" "),a("p",[t._v("因此，该return语句中字符串的顺序相当重要，因为它确定我们将使用哪种顺序进行连接。")]),t._v(" "),a("p",[t._v("由于这不是一系列乘法问题，因此调用栈更容易理解。这是一个视觉效果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/23453305/113371701-93918900-9399-11eb-88a5-bdef4ca3eb2a.gif",alt:"recursionex2"}})]),t._v(" "),a("p",[t._v("这就是字符串的顺序如此重要的原因-当我们在上面的GIF中构建调用堆栈时，递归函数调用和字符串片段（str [0]）有特定的顺序。")]),t._v(" "),a("p",[t._v("当我们运行堆栈中的所有调用时，此顺序使我们能够以相反的顺序重建字符串。")]),t._v(" "),a("p",[t._v("【完】")])])}),[],!1,null,null,null);s.default=r.exports}}]);